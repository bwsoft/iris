/*******************************************************************************
 * Copyright 2016 bwsoft and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.bwsoft.iris.message.sbe;

import java.io.FileNotFoundException;
import java.nio.ByteBuffer;

import javax.xml.bind.JAXBException;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.bwsoft.iris.message.Field;
import com.bwsoft.iris.message.FieldType;
import com.bwsoft.iris.message.Group;
import com.bwsoft.iris.message.GroupObject;
import com.bwsoft.iris.message.SBEMessageSchema;

public class SBEMessageTest {

	// a buffer that is populated with SBE message before all tests. 
	private final static ByteBuffer sbeBuffer = ByteBuffer.allocateDirect(4096);
	private final static int bufferOffset = 0;
	
	// the sbe message in JSON format that is generated by RL SBE encoder. This will be 
	// used to verify the output of the current decoder.
	private final static String sbeMsgInJson = "{" +
			"\"serialNumber\":1234,\"modelYear\":2013,\"available\":TRUE,\"code\":A," +
			"\"someNumbers\":[0,1,2,3,4],\"vehicleCode\":\"abcdef\",\"extras\":6,"+
			"\"engine\":{\"capacity\":2000,\"numCylinders\":4,\"maxRpm\":9000,"+
			"\"manufacturerCode\":\"123\",\"fuel\":\"Petrol\"},"+
			"\"fuelFigures\":[{\"speed\":30,\"mpg\":35.9},{\"speed\":55,\"mpg\":49.0},"+
			"{\"speed\":75,\"mpg\":40.0}],\"performanceFigures\":[{\"octaneRating\":95,"+
			"\"acceleration\":[{\"mph\":30,\"seconds\":4.0},{\"mph\":60,\"seconds\":7.5},"+
			"{\"mph\":100,\"seconds\":12.2}]},{\"octaneRating\":99,\"acceleration\":"+
			"[{\"mph\":30,\"seconds\":3.8},{\"mph\":60,\"seconds\":7.1},"+
			"{\"mph\":100,\"seconds\":11.8}]}],\"make\":\"Honda\",\"model\":\"Civic VTi\","+
			"\"activationCode\":\"deadbeef\"}";


	/**
	 * Use RL SBE encoder to create a SBE message and store it in sbeBuffer
	 */
	@BeforeClass
	public static void createSBEMessage() {
		SBEMessageTestUtil.createSBEMessageUsingRLEncoder(sbeBuffer, bufferOffset);
	}
	
	/**
	 * Verify the XML based creation of SBE message and compare it with the manual creation.
	 *  
	 * @throws FileNotFoundException
	 * @throws JAXBException
	 */
	@Test
	public void testSbeMessageDefinitionCreation() throws FileNotFoundException, JAXBException {
		// create a sbe message schema based upon the XML definition. 
		// The HashMap contains all messages defined in the xml with the message templateId as the key.
		// There is only one message in the XML.
		SBEMessageSchema factory = SBEMessageSchema.createSBESchema("./src/test/resources/example-schema.xml");
		SBEMessage sbeMessage = factory.getMsgLookup().get(1);
		
		// Now create the same message manually
		SBEMessageSchemaHeader schema = new SBEMessageSchemaHeader("", 1, 0, "", "LITTLEENDIAN");
		SBEMessageHeader msgHeader = new SBEMessageHeader(FieldType.U16, FieldType.U16, FieldType.U16, FieldType.U16);
		SBEGroupHeader groupHeader = new SBEGroupHeader(FieldType.U8, FieldType.U16);
		SBEVarLengthFieldHeader varLengthFieldHeader = new SBEVarLengthFieldHeader(FieldType.U8);

		SBEMessage message = (SBEMessage) new SBEMessage(schema, msgHeader, groupHeader, varLengthFieldHeader).setName("Car").setID((short) 1);
		message.addChildField((short)1,FieldType.U64, (short) 1).setName("serialNumber");
		message.addChildField((short)2,FieldType.U16, (short) 1).setName("modelYear");
		message.addChildField((short)3,FieldType.U8, (short) 1).setName("available");
		message.addChildField((short)4, FieldType.CHAR, (short) 1).setName("code");
		message.addChildField((short)5,FieldType.I32, (short) 5).setName("someNumbers");
		message.addChildField((short) 6,FieldType.CHAR, (short) 6).setName("vehicleCode");
		message.addChildField((short) 7,FieldType.U8, (short) 1).setName("extras");
		Group engine = (Group) message.addChildField((short) 8,FieldType.COMPOSITE, (short) 1).setName("engine");
		engine.addChildField((short) 8,FieldType.U16, (short) 1).setName("capacity");
		engine.addChildField((short) 8, FieldType.U8, (short) 1).setName("numCylinders");
		engine.addChildField((short) 8, FieldType.CONSTANT, (short) 1).setName("maxRpm");
		engine.addChildField((short) 8, FieldType.CHAR, (short)3).setName("manufacturerCode");
		engine.addChildField((short) 8, FieldType.CONSTANT, (short) 1).setName("fuel");
		
		Group fuelFigure = (Group) message.addChildField((short) 9,FieldType.GROUP, (short) 1).setName("fuelFigures");
		fuelFigure.addChildField((short) 10,FieldType.U16, (short) 1).setName("speed");
		fuelFigure.addChildField((short) 11,FieldType.FLOAT, (short) 1).setName("mpg");
		
		Group performanceFigures = (Group) message.addChildField((short) 12,FieldType.GROUP, (short) 1).setName("performanceFigures");
		performanceFigures.addChildField((short)13,FieldType.U8, (short) 1).setName("octaneRating");
		Group acceleration = (Group) performanceFigures.addChildField((short) 14,FieldType.GROUP, (short) 1).setName("acceleration");
		acceleration.addChildField((short) 15,FieldType.U16, (short) 1).setName("mph");
		acceleration.addChildField((short) 16,FieldType.FLOAT, (short) 1).setName("seconds");
		
		message.addChildField((short) 17,FieldType.RAW, (short) 1).setName("make");
		message.addChildField((short) 18,FieldType.RAW, (short) 1).setName("model");
		message.addChildField((short) 19,FieldType.RAW, (short) 1).setName("activationCode");
		
		// compare two messages to ensure that they are the same
		System.out.println("Automaticall created message: "+sbeMessage.toString());
		System.out.println("Manually created message    : "+message.toString());
		
		Assert.assertEquals(message.toString(), sbeMessage.toString());
	}
	
	/**
	 * Demonstrate the usage of the SBEMessage parser by parsing the sbeBuffer populated
	 * by RL SBE encoder. 
	 * 
	 * @throws FileNotFoundException
	 * @throws JAXBException
	 */
	@Test
	public void sbeMessageTest() throws FileNotFoundException, JAXBException {
		// create SBEMessageSchema based upon the schema.
		SBEMessageSchema factory = SBEMessageSchema.createSBESchema("./src/test/resources/example-schema.xml");

		// lookup a message definition in the factory and cache some field definition for accessing
		// its value
		// The message for template ID 1 is retrieved. 
		SBEMessage msgDefinition = factory.getMsgLookup().get(1);
		Field extraField = msgDefinition.getChildField((short) 7); // extra field
		Group performanceFigureGroup = (Group) msgDefinition.getChildField((short) 12); // performanceFigure is a group under the message
		Group acclerationGroup = (Group) performanceFigureGroup.getChildField((short)14); // acceleration is a group within performanceFigure group
		Field mphField = acclerationGroup.getChildField((short)15); // mph is a field within acceleration
		
		// wrap message for reading. The right message template is selected automatically
		// based upon the template ID in the message header. 
		GroupObject obj = factory.wrapForRead(sbeBuffer, bufferOffset);

		if( null != obj ) {
			// it is the message belong to this message schema.
			// obtain the message defintion 
			SBEMessage msg = (SBEMessage) obj.getDefinition();
			
			// print out message ID
			System.out.println("Get a message with template ID: "+msg.getID());
			Assert.assertEquals((short)1, msg.getID());

			System.out.println(obj.toString()); // display whole object in json
			Assert.assertEquals(sbeMsgInJson, obj.toString());

			// verify several values within the message
			System.out.println("mph: "+obj.getGroupArray(performanceFigureGroup).getGroupObject((short) 1).getGroupArray(acclerationGroup).getGroupObject(1).getNumber(mphField));
			Assert.assertEquals(60, obj.getGroupArray(performanceFigureGroup).getGroupObject((short) 1).getGroupArray(acclerationGroup).getGroupObject(1).getNumber(mphField));
			System.out.print("extra available: sunRoof? "+obj.isSet(extraField, "sunRoof"));
			System.out.print(", sportsPack? "+obj.isSet(extraField, "sportsPack"));
			System.out.println(", cruiseControl? "+obj.isSet(extraField, "cruiseControl"));
			Assert.assertEquals(false, obj.isSet(extraField, "sunRoof"));
			Assert.assertEquals(true, obj.isSet(extraField, "sportsPack"));
			Assert.assertEquals(true, obj.isSet(extraField, "cruiseControl"));
		}
	}
	
	@AfterClass
	public static void cleanup() {
		
	}	
}
