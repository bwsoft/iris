/*******************************************************************************
 * Copyright 2016 bwsoft and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *******************************************************************************/
package com.github.bwsoft.iris.message.sbe;

import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import javax.xml.bind.JAXBException;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;

import com.github.bwsoft.iris.message.Field;
import com.github.bwsoft.iris.message.FieldType;
import com.github.bwsoft.iris.message.Group;
import com.github.bwsoft.iris.message.GroupObject;
import com.github.bwsoft.iris.message.GroupObjectArray;
import com.github.bwsoft.iris.message.SBEMessageSchema;
import com.github.bwsoft.iris.message.sbe.SBEGroupHeader;
import com.github.bwsoft.iris.message.sbe.SBEMessage;
import com.github.bwsoft.iris.message.sbe.SBEMessageHeader;
import com.github.bwsoft.iris.message.sbe.SBEMessageSchemaHeader;
import com.github.bwsoft.iris.message.sbe.SBEVarLengthFieldHeader;
import com.github.bwsoft.iris.util.MessageUtil;

public class SBEMessageDecoderTest {

	// a buffer that is populated with SBE message before all tests. 
	private final static ByteBuffer sbeBuffer = ByteBuffer.allocateDirect(4096);
	private final static int bufferOffset = 0;

	// create SBEMessageSchema based upon the schema.
	private static SBEMessageSchema factory;
	private static SBEMessage car;
	// fields in the main message
	private static Field serialNumber, modelYear, available, code, someNumbers, vehicleCode, extras, make, model, activationCode;  
	// groups in the main message;
	private static Group engine, fuelFigures, performanceFigures;
	// fields in the engine
	private static Field capacity, numCylinders, maxRpm, manufacturerCode, fuel;
	// fields in the fuelFigures
	private static Field speed, mpg;
	// fields in the performanceFigures
	private static Field octaneRating;
	// group in the perfromance Figures
	private static Group acceleration;
	// Fields in the accleration
	private static Field mph, seconds;

	// the sbe message in JSON format that is generated by RL SBE encoder. This will be 
	// used to verify the output of the current decoder.
	private final static String[] sbeMsgInJson = {"{" +
			"\"serialNumber\":1234,\"modelYear\":2013,\"available\":TRUE,\"code\":A," +
			"\"someNumbers\":[0,1,2,3,4],\"vehicleCode\":\"abcdef\",\"extras\":6,"+
			"\"engine\":{\"capacity\":2000,\"numCylinders\":4,\"maxRpm\":9000,"+
			"\"manufacturerCode\":\"123\",\"fuel\":\"Petrol\"},"+
			"\"fuelFigures\":[{\"speed\":30,\"mpg\":35.9},{\"speed\":55,\"mpg\":49.0},"+
			"{\"speed\":75,\"mpg\":40.0}],\"performanceFigures\":[{\"octaneRating\":95,"+
			"\"acceleration\":[{\"mph\":30,\"seconds\":4.0},{\"mph\":60,\"seconds\":7.5},"+
			"{\"mph\":100,\"seconds\":12.2}]},{\"octaneRating\":99,\"acceleration\":"+
			"[{\"mph\":30,\"seconds\":3.8},{\"mph\":60,\"seconds\":7.1},"+
			"{\"mph\":100,\"seconds\":11.8}]}],\"make\":\"Honda\",\"model\":\"Civic VTi\","+
			"\"activationCode\":\"deadbeef\"}",
			
			"{\"serialNumber\":1235,\"modelYear\":2014,\"available\":FALSE,\"code\":B,"+
			"\"someNumbers\":[0,3,6,9,12],\"vehicleCode\":\"abcdef\",\"extras\":5,\"engine\":"+
			"{\"capacity\":2000,\"numCylinders\":4,\"maxRpm\":9000,\"manufacturerCode\":\"123\","+
			"\"fuel\":\"Petrol\"},\"fuelFigures\":null,\"performanceFigures\":[{\"octaneRating\":95,"+
			"\"acceleration\":[{\"mph\":30,\"seconds\":4.0},{\"mph\":60,\"seconds\":7.5},{\"mph\":100,\"seconds\":12.2}]},"+
		    "{\"octaneRating\":99,\"acceleration\":null}],\"make\":\"Honda\",\"model\":null,\"activationCode\":"+
			"\"deadbeef\"}",
	
			"{\"serialNumber\":1234,\"modelYear\":2013,\"available\":TRUE,\"code\":A," +
			"\"someNumbers\":[0,1,2,3,4],\"vehicleCode\":\"abcdef\",\"extras\":6,"+
			"\"engine\":{\"capacity\":2000,\"numCylinders\":4,\"maxRpm\":9000,"+
			"\"manufacturerCode\":\"123\",\"fuel\":\"Petrol\"},"+
			"\"fuelFigures\":[{\"speed\":30,\"mpg\":35.9},{\"speed\":55,\"mpg\":49.0},"+
			"{\"speed\":75,\"mpg\":40.0}],\"performanceFigures\":[{\"octaneRating\":95,"+
			"\"acceleration\":[{\"mph\":30,\"seconds\":4.0},"+
			"{\"mph\":100,\"seconds\":12.2}]},{\"octaneRating\":99,\"acceleration\":"+
			"[{\"mph\":30,\"seconds\":3.8},{\"mph\":60,\"seconds\":7.1},"+
			"{\"mph\":100,\"seconds\":11.8}]}],\"make\":\"Honda\",\"model\":\"Civic VTi\","+
			"\"activationCode\":\"deadbeef\"}"	};


	@Rule
	public TestRule watcher = new TestWatcher() {
		protected void starting(Description description) {
			System.out.format("\nStarting test: %s", description.getMethodName());
		}
	};
	
	/**
	 * Use RL SBE encoder to create a SBE message and store it in sbeBuffer
	 * 
	 * Create SBE message schema, obtain message definition, and field definitions.
	 */
	@BeforeClass
	public static void createSBEMessage() {
		// Use RL encoder to populate a buffer containing three SBE messages.
		SBEMessageTestUtil.createSBEMessageUsingRLEncoder(sbeBuffer, bufferOffset);
		
		// load test schema
		try{
			factory = SBEMessageSchema.createSBESchema("./src/test/resources/example-schema.xml");
		} catch( Exception e ) {
			e.printStackTrace();
		}
		
		// create a reference to the message contained in the test schema
		Assert.assertNotNull(factory.getMsgLookup());
		Assert.assertEquals(1,factory.getMsgLookup().size());
		car = factory.getMsgLookup().get(1); // template ID = 1
		Assert.assertNotNull(car);
		
		// cache Field definitions for quick access
		serialNumber = car.getField("serialNumber");
		Assert.assertNotNull(serialNumber);
		modelYear = car.getField("modelYear");
		Assert.assertNotNull(modelYear);
		available = car.getField("available");
		Assert.assertNotNull(available);
		code = car.getField("code");
		Assert.assertNotNull(code); 
		someNumbers = car.getField("someNumbers");
		Assert.assertNotNull(someNumbers);
		vehicleCode = car.getField("vehicleCode");
		Assert.assertNotNull(vehicleCode);
		extras = car.getField("extras");
		Assert.assertNotNull(extras);
		make = car.getField("make");
		Assert.assertNotNull(make);
		model = car.getField("model");
		Assert.assertNotNull(model);
		activationCode = car.getField("activationCode");
		Assert.assertNotNull(activationCode);
		
		engine = (Group) car.getField("engine");
		Assert.assertNotNull(engine);
		capacity = engine.getField("capacity");
		Assert.assertNotNull(capacity);
		numCylinders = engine.getField("numCylinders");
		Assert.assertNotNull(numCylinders);
		maxRpm = engine.getField("maxRpm");
		Assert.assertNotNull(maxRpm);
		manufacturerCode = engine.getField("manufacturerCode");
		Assert.assertNotNull(manufacturerCode);
		fuel = engine.getField("fuel");
		Assert.assertNotNull(fuel);
		
		fuelFigures = (Group) car.getField("fuelFigures");
		Assert.assertNotNull(fuelFigures);
		speed = fuelFigures.getField("speed");
		Assert.assertNotNull(speed);
		mpg = fuelFigures.getField("mpg");
		Assert.assertNotNull(mpg);
		
		performanceFigures = (Group) car.getField("performanceFigures");
		Assert.assertNotNull(performanceFigures);
		octaneRating = performanceFigures.getField("octaneRating");
		Assert.assertNotNull(octaneRating);
		
		acceleration = (Group) performanceFigures.getField("acceleration");
		Assert.assertNotNull(acceleration);
		mph = acceleration.getField("mph");
		Assert.assertNotNull(mph);
		seconds = acceleration.getField("seconds");
		Assert.assertNotNull(seconds);
	}
	
	/**
	 * Verify the XML based creation of SBE message and compare it with the manual creation.
	 *  
	 * @throws FileNotFoundException
	 * @throws JAXBException
	 */
	@Test
	public void verifyTheCreationOfTheMessageDefinition() throws FileNotFoundException, JAXBException {
		// Obtain the message via SBEMessageSchema
		SBEMessage sbeMessage = factory.getMsgLookup().get(1);
		
		// Create the same message manually
		SBEMessageSchemaHeader schema = new SBEMessageSchemaHeader("", 1, 0, "", "LITTLEENDIAN");
		SBEMessageHeader msgHeader = new SBEMessageHeader(FieldType.U16, FieldType.U16, FieldType.U16, FieldType.U16);
		SBEGroupHeader groupHeader = new SBEGroupHeader(FieldType.U8, FieldType.U16);
		SBEVarLengthFieldHeader varLengthFieldHeader = new SBEVarLengthFieldHeader(FieldType.U8);

		SBEMessage message = (SBEMessage) new SBEMessage(schema, msgHeader, groupHeader, varLengthFieldHeader).setName("Car").setID((short) 1);
		message.addField((short)1,FieldType.U64, (short) 1).setName("serialNumber");
		message.addField((short)2,FieldType.U16, (short) 1).setName("modelYear");
		message.addField((short)3,FieldType.U8, (short) 1).setName("available");
		message.addField((short)4, FieldType.CHAR, (short) 1).setName("code");
		message.addField((short)5,FieldType.I32, (short) 5).setName("someNumbers");
		message.addField((short) 6,FieldType.CHAR, (short) 6).setName("vehicleCode");
		message.addField((short) 7,FieldType.U8, (short) 1).setName("extras");
		Group engine = (Group) message.addField((short) 8,FieldType.COMPOSITE, (short) 1).setName("engine");
		engine.addField((short) 8,FieldType.U16, (short) 1).setName("capacity");
		engine.addField((short) 8, FieldType.U8, (short) 1).setName("numCylinders");
		engine.addField((short) 8, FieldType.CONSTANT, (short) 1).setName("maxRpm");
		engine.addField((short) 8, FieldType.CHAR, (short)3).setName("manufacturerCode");
		engine.addField((short) 8, FieldType.CONSTANT, (short) 1).setName("fuel");
		
		Group fuelFigure = (Group) message.addField((short) 9,FieldType.GROUP, (short) 1).setName("fuelFigures");
		fuelFigure.addField((short) 10,FieldType.U16, (short) 1).setName("speed");
		fuelFigure.addField((short) 11,FieldType.FLOAT, (short) 1).setName("mpg");
		
		Group performanceFigures = (Group) message.addField((short) 12,FieldType.GROUP, (short) 1).setName("performanceFigures");
		performanceFigures.addField((short)13,FieldType.U8, (short) 1).setName("octaneRating");
		Group acceleration = (Group) performanceFigures.addField((short) 14,FieldType.GROUP, (short) 1).setName("acceleration");
		acceleration.addField((short) 15,FieldType.U16, (short) 1).setName("mph");
		acceleration.addField((short) 16,FieldType.FLOAT, (short) 1).setName("seconds");
		
		message.addField((short) 17,FieldType.RAW, (short) 1).setName("make");
		message.addField((short) 18,FieldType.RAW, (short) 1).setName("model");
		message.addField((short) 19,FieldType.RAW, (short) 1).setName("activationCode");
		
		// compare two messages to ensure that they are the same
		Assert.assertEquals(MessageUtil.toJsonString(sbeMessage), MessageUtil.toJsonString(message));
		System.out.println(" ...... passed");
	}
	
	/**
	 * Parse the first SBE message field by field to verify the correctness 
	 * 
	 * @throws UnsupportedEncodingException 
	 */
	@Test
	public void fieldByFieldVerificationOfADecodingResult() throws UnsupportedEncodingException {
		// copy the first sbe message to a byte array to test the copy facility
		byte[] firstSBE = new byte[1024];
		// test the copy utility
		MessageUtil.messageCopy(sbeBuffer, bufferOffset, 0, firstSBE, 0, factory);
		
		ByteBuffer firstSBEBuffer = ByteBuffer.wrap(firstSBE);
		
		// wrap message to obtain GroupObject
		GroupObject msgObj = factory.wrapSbeBuffer(firstSBEBuffer, 0);
		Assert.assertEquals(1, msgObj.getDefinition().getID()); // assert the message is the Car message
		
		Assert.assertEquals(1234, msgObj.getNumber(serialNumber).longValue());
		Assert.assertEquals(2013, msgObj.getNumber(modelYear).shortValue());
		Assert.assertEquals("TRUE", msgObj.getEnumName(available));
		Assert.assertEquals("A", msgObj.getEnumName(code));
		Integer[] someNumbersActual = new Integer[5];
		Integer[] someNumbersExpect = {0,1,2,3,4};
		msgObj.getNumbers(someNumbers, someNumbersActual, 0, 5);
		Assert.assertArrayEquals(someNumbersExpect, someNumbersActual);
		byte[] vehicleCodeActual = new byte[6];
		msgObj.getBytes(vehicleCode, vehicleCodeActual, 0, 6);
		Assert.assertArrayEquals("abcdef".getBytes(), vehicleCodeActual);
		Assert.assertEquals(false, msgObj.isSet(extras, "sunRoof"));
		Assert.assertEquals(true, msgObj.isSet(extras, "sportsPack"));
		Assert.assertEquals(true, msgObj.isSet(extras, "cruiseControl"));
		Assert.assertEquals(2000, msgObj.getNumber(capacity).shortValue());
		Assert.assertEquals(4, msgObj.getNumber(numCylinders).shortValue());
		Assert.assertEquals("9000", msgObj.getString(maxRpm, Charset.defaultCharset().name())); // constant field is always a string value
		char[] manufactureCodeActual = new char[3];
		msgObj.getChars(manufacturerCode, manufactureCodeActual, 0, 3);
		Assert.assertArrayEquals("123".toCharArray(), manufactureCodeActual);
		Assert.assertEquals("Petrol", msgObj.getString(fuel, Charset.defaultCharset().name()));
		
		GroupObjectArray fuelFiguresArray = msgObj.getGroupArray(fuelFigures);
		Assert.assertEquals(3, fuelFiguresArray.getNumOfGroups());
		int speedActual[] = new int[3];
		int speedExpected[] = {30,55,75};
		float mpgActual[] = new float[3];
		float mpgExpected[] = {35.9f, 49.0f, 40.0f};
		for( short i = 0; i < 3; i ++ ) {
			GroupObject fuelFigureObj = fuelFiguresArray.getGroupObject(i);
			speedActual[i] = fuelFigureObj.getNumber(speed).intValue();
			mpgActual[i] = fuelFigureObj.getNumber(mpg).floatValue();
		}
		Assert.assertArrayEquals(speedExpected, speedActual);
		Assert.assertArrayEquals(mpgExpected, mpgActual, 0.001f);
		
		GroupObjectArray performanceFiguresArray = msgObj.getGroupArray(performanceFigures);
		Assert.assertEquals(2, performanceFiguresArray.getNumOfGroups());
		int octaneRatingActual[] = {95,99};
		int mphActual[][] = {{30,60,100},{30,60,100}};
		float secondsActual[][] = {{4.0f, 7.5f, 12.2f},{3.8f,7.1f,11.8f}};
		for( short i = 0; i < 2; i ++ ) {
			GroupObject performanceFiguresObj = performanceFiguresArray.getGroupObject(i);
			Assert.assertEquals(octaneRatingActual[i], performanceFiguresObj.getNumber(octaneRating).intValue());
			
			GroupObjectArray acclerationsArray = performanceFiguresObj.getGroupArray(acceleration);
			Assert.assertEquals(3, acclerationsArray.getNumOfGroups());
			for( short j=0; j < 3; j ++ ){
				GroupObject accelerationObj = acclerationsArray.getGroupObject(j);
				Assert.assertEquals(mphActual[i][j], accelerationObj.getNumber(mph).intValue());
				Assert.assertEquals(secondsActual[i][j], accelerationObj.getNumber(seconds).floatValue(), 0.001f);
			}
		}
		
		byte[] makeValue = new byte[5];
		msgObj.getBytes(make, makeValue, 0, 5);
		Assert.assertArrayEquals("Honda".getBytes("utf-8"), makeValue);

		byte[] modelValue = new byte[9];
		msgObj.getBytes(model, modelValue, 0, 9);
		Assert.assertArrayEquals("Civic VTi".getBytes(), modelValue);

		byte[] activationCodeValue = new byte[8];
		msgObj.getBytes(activationCode, activationCodeValue, 0, 8);
		Assert.assertArrayEquals("deadbeef".getBytes(), activationCodeValue);
		System.out.println(" ...... passed");
	}
	
	/**
	 * Parse all three SBE messages created by RL logic and compare the result with pre-defined
	 * string array to verify the parser 
	 * 
	 * @throws FileNotFoundException
	 * @throws JAXBException
	 * @throws UnsupportedEncodingException 
	 */
	@Test
	public void useParserToCreateAStringRepresentationOfSBEMsgsAndCompareAgainstTheExpected() throws FileNotFoundException, JAXBException, UnsupportedEncodingException {
		// wrap message for reading. The right message template is selected automatically
		// based upon the template ID in the message header. 
		int currentOffset = bufferOffset;
		GroupObject obj = factory.wrapSbeBuffer(sbeBuffer, currentOffset);

		// loop through the whole buffer since it may contain multiple messages
		int testCase = 0;
		while( null != obj ) {			
			// assert message is a car
			Assert.assertEquals((short)1, obj.getDefinition().getID());

			// compare the message with the pre-populated array
			Assert.assertEquals(sbeMsgInJson[testCase], MessageUtil.toJsonString(obj, Charset.defaultCharset().name()));

			// move offset to the end and process the next message
			currentOffset += (obj.getSize() + ((SBEMessage) obj.getDefinition()).getHeader().getSize());
			obj = factory.wrapSbeBuffer(sbeBuffer, currentOffset);
			testCase ++;
		}
		Assert.assertEquals(3, testCase);
		System.out.println(" ...... passed");
	}
	
	@AfterClass
	public static void cleanup() {
		
	}	
}
